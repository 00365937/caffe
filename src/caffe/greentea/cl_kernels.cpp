// AUTOMATICALLY GENERATED FILE, DO NOT EDIT
#ifdef USE_GREENTEA
#include "caffe/greentea/cl_kernels.hpp"
#include <sstream>
#include <string>
namespace caffe {
std::string header = "#ifndef __OPENCL_VERSION__\n#define __kernel\n#define __global\n#define __constant\n#define __local\n#define get_global_id(x) 0\n#define get_global_size(x) 0\n#define get_local_id(x) 0\n#define get_local_size(x) 0\n#define FLT_MAX 0\n#define FLT_MIN 0\n#define cl_khr_fp64\n#define cl_amd_fp64\n#define DOUBLE_SUPPORT_AVAILABLE\n#define CLK_LOCAL_MEM_FENCE\n#define Dtype float\n#define barrier(x)\n#endif\n\n#define CONCAT(A,B) A##_##B\n#define TEMPLATE(name,type) CONCAT(name,type)\n\n\n#if defined(cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n#define DOUBLE_SUPPORT_AVAILABLE\n#elif defined(cl_amd_fp64)\n#pragma OPENCL EXTENSION cl_amd_fp64 : enable\n#define DOUBLE_SUPPORT_AVAILABLE\n#endif";  // NOLINT
std::string header_float = "#ifndef __OPENCL_VERSION__\n#define __kernel\n#define __global\n#define __constant\n#define __local\n#define get_global_id(x) 0\n#define get_global_size(x) 0\n#define get_local_id(x) 0\n#define get_local_size(x) 0\n#define FLT_MAX 0\n#define FLT_MIN 0\n#define cl_khr_fp64\n#define cl_amd_fp64\n#define DOUBLE_SUPPORT_AVAILABLE\n#define CLK_LOCAL_MEM_FENCE\n#define Dtype float\n#define barrier(x)\n#endif\n\n#define CONCAT(A,B) A##_##B\n#define TEMPLATE(name,type) CONCAT(name,type)\n\n\n#if defined(cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n#define DOUBLE_SUPPORT_AVAILABLE\n#elif defined(cl_amd_fp64)\n#pragma OPENCL EXTENSION cl_amd_fp64 : enable\n#define DOUBLE_SUPPORT_AVAILABLE\n#endif";  // NOLINT
std::string activation_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(relu_forward,Dtype)(const int n,\n                                           __global const Dtype* in,\n                                           __global Dtype* out,\n                                           Dtype negative_slope) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = in[index] > 0 ? in[index] : in[index] * negative_slope;\n  }\n}\n\n__kernel void TEMPLATE(relu_backward,Dtype)(const int n,\n                                            __global const Dtype* in_diff,\n                                            __global const Dtype* in_data,\n                                            __global Dtype* out_diff,\n                                            Dtype negative_slope) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out_diff[index] = in_diff[index]\n        * ((in_data[index] > 0) + (in_data[index] <= 0) * negative_slope);\n  }\n}\n\n__kernel void TEMPLATE(tanh_forward,Dtype)(const int n,\n                                           __global const Dtype* in,\n                                           __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = tanh(in[index]);\n  }\n}\n\n__kernel void TEMPLATE(tanh_backward,Dtype)(const int n,\n                                            __global const Dtype* in_diff,\n                                            __global const Dtype* out_data,\n                                            __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype tanhx = out_data[index];\n    out_diff[index] = in_diff[index] * (1 - tanhx * tanhx);\n  }\n}\n\n__kernel void TEMPLATE(sigmoid_forward,Dtype)(const int n,\n                                              __global const Dtype* in,\n                                              __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = 1. / (1. + exp(-in[index]));\n  }\n}\n\n__kernel void TEMPLATE(sigmoid_backward,Dtype)(const int n,\n                                               __global const Dtype* in_diff,\n                                               __global const Dtype* out_data,\n                                               __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    const Dtype sigmoid_x = out_data[index];\n    out_diff[index] = in_diff[index] * sigmoid_x * (1 - sigmoid_x);\n  }\n}\n\n__kernel void TEMPLATE(threshold,Dtype)(const int n, const Dtype threshold,\n                                        __global const Dtype* in,\n                                        __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = in[index] > threshold ? 1 : 0;\n  }\n}\n\n__kernel void TEMPLATE(prelu_forward,Dtype)(const int n, const int channels,\n                                            const int dim,\n                                            __global const Dtype* in,\n                                            __global Dtype* out,\n                                            __global const Dtype* slope_data,\n                                            const int div_factor) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int c = (index / dim) % channels / div_factor;\n    out[index] = in[index] > 0 ? in[index] : in[index] * slope_data[c];\n  }\n}\n\n__kernel void TEMPLATE(prelu_backward,Dtype)(const int n, const int channels,\n                                             const int dim,\n                                             __global const Dtype* in_diff,\n                                             __global const Dtype* in_data,\n                                             __global Dtype* out_diff,\n                                             __global const Dtype* slope_data,\n                                             const int div_factor) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int c = (index / dim) % channels / div_factor;\n    out_diff[index] = in_diff[index]\n        * ((in_data[index] > 0) + (in_data[index] <= 0) * slope_data[c]);\n  }\n}\n\n__kernel void TEMPLATE(prelu_param_backward,Dtype)(const int n,\n                                                   __global const Dtype* in_diff, const int in_diff_off,\n                                                   __global const Dtype* in_data, const int in_data_off,\n                                                   __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out_diff[index] = in_diff[index + in_diff_off] * in_data[index + in_data_off] * (in_data[index + in_data_off] <= 0);\n  }\n}";  // NOLINT
std::string auxiliary_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(gpu_set,Dtype)(const int n, const Dtype alpha, __global Dtype* y) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index] = alpha;\n  }\n}";  // NOLINT
std::string bnll_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(bnll_forward,Dtype)(const int n,\n                                           __global const Dtype* in,\n                                           __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] =\n        in[index] > 0 ?\n            in[index] + log(1. + exp(-in[index])) : log(1. + exp(in[index]));\n  }\n}\n\n__kernel void TEMPLATE(bnll_backward,Dtype)(const int n,\n                                            __global const Dtype* in_diff,\n                                            __global const Dtype* in_data,\n                                            __global Dtype* out_diff) {\n  Dtype kBNLL_THRESHOLD = 50.;\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype expval = exp(min(in_data[index], kBNLL_THRESHOLD));\n    out_diff[index] = in_diff[index] * expval / (expval + 1.);\n  }\n}";  // NOLINT
std::string channel_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(kernel_channel_max,Dtype)(const int num, const int channels,\n                                   const int spatial_dim,\n                                   __global const Dtype* data,\n                                   __global Dtype* out) {\n  for (int index = get_global_id(0); index < num * spatial_dim; index +=\n      get_global_size(0)) {\n    int n = index / spatial_dim;\n    int s = index % spatial_dim;\n    float maxval = -FLT_MAX;\n    for (int c = 0; c < channels; ++c) {\n      maxval = max((Dtype)(data[(n * channels + c) * spatial_dim + s]), (Dtype)maxval);\n    }\n    out[index] = maxval;\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_subtract,Dtype)(const int count, const int num,\n                                        const int channels,\n                                        const int spatial_dim,\n                                        __global const Dtype* channel_max,\n                                        __global Dtype* data) {\n  for (int index = get_global_id(0); index < count;\n      index += get_global_size(0)) {\n    int n = index / channels / spatial_dim;\n    int s = index % spatial_dim;\n    data[index] -= channel_max[n * spatial_dim + s];\n  }\n}\n\n__kernel void TEMPLATE(kernel_exp,Dtype)(const int count, __global const Dtype* data,\n                           __global Dtype* out) {\n  for (int index = get_global_id(0); index < count;\n      index += get_global_size(0)) {\n    out[index] = exp(data[index]);\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_sum,Dtype)(const int num, const int channels,\n                                   const int spatial_dim,\n                                   __global const Dtype* data,\n                                   __global Dtype* channel_sum) {\n  for (int index = get_global_id(0); index < num * spatial_dim; index +=\n      get_global_size(0)) {\n    int n = index / spatial_dim;\n    int s = index % spatial_dim;\n    Dtype sum = 0;\n    for (int c = 0; c < channels; ++c) {\n      sum += data[(n * channels + c) * spatial_dim + s];\n    }\n    channel_sum[index] = sum;\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_div,Dtype)(const int count, const int num,\n                                   const int channels, const int spatial_dim,\n                                   __global const Dtype* channel_sum,\n                                   __global Dtype* data) {\n  for (int index = get_global_id(0); index < count;\n      index += get_global_size(0)) {\n    int n = index / channels / spatial_dim;\n    int s = index % spatial_dim;\n    data[index] /= channel_sum[n * spatial_dim + s];\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_dot,Dtype)(const int num, const int channels,\n                                   const int spatial_dim,\n                                   __global const Dtype* data_1,\n                                   __global const Dtype* data_2,\n                                   __global Dtype* channel_dot) {\n  for (int index = get_global_id(0); index < num * spatial_dim; index +=\n      get_global_size(0)) {\n    int n = index / spatial_dim;\n    int s = index % spatial_dim;\n    Dtype dot = 0;\n    for (int c = 0; c < channels; ++c) {\n      dot += (data_1[(n * channels + c) * spatial_dim + s]\n          * data_2[(n * channels + c) * spatial_dim + s]);\n    }\n    channel_dot[index] = dot;\n  }\n}";  // NOLINT
std::string concat_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(concat,Dtype)(const int nthreads, __global const Dtype* in_data,\n                                     const int forward, const int num_concats,\n                                     const int concat_size,\n                                     const int top_concat_axis,\n                                     const int bottom_concat_axis,\n                                     const int offset_concat_axis,\n                                     __global Dtype* out_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int total_concat_size = concat_size * bottom_concat_axis;\n    const int concat_num = index / total_concat_size;\n    const int concat_index = index % total_concat_size;\n    const int top_index = concat_index\n        + (concat_num * top_concat_axis + offset_concat_axis) * concat_size;\n    if (forward == 1) {\n      out_data[top_index] = in_data[index];\n    } else {\n      out_data[index] = in_data[top_index];\n    }\n  }\n}";  // NOLINT
std::string contrastive_loss_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(cll_backward,Dtype)(const int count, const int channels,\n                            const Dtype margin, const int legacy_version,\n                            const Dtype alpha, __global const Dtype* y,\n                            __global const Dtype* diff, __global const Dtype* dist_sq,\n                            __global Dtype *bottom_diff) {\n  for (int i = get_global_id(0); i < count;\n      i += get_global_size(0)) {\n    int n = i / channels;  // the num index, to access y and dist_sq\n    if ((int)(y[n])) {  // similar pairs\n      bottom_diff[i] = alpha * diff[i];\n    } else {  // dissimilar pairs\n      Dtype mdist = 0.0;\n      Dtype beta = 0.0;\n      if (legacy_version == 1) {\n        mdist = (margin - dist_sq[n]);\n        beta = -alpha;\n      } else {\n        Dtype dist = sqrt(dist_sq[n]);\n        mdist = (margin - dist);\n        beta = -alpha * mdist / (dist + 1e-4) * diff[i];\n      }\n      if (mdist > 0.0) {\n        bottom_diff[i] = beta;\n      } else {\n        bottom_diff[i] = 0;\n      }\n    }\n  }\n}";  // NOLINT
std::string dropout_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(dropout_forward,Dtype)(const int n,\n                                              __global const Dtype* in,\n                                              __global const unsigned int* mask,\n                                              const unsigned int threshold,\n                                              const Dtype scale,\n                                              __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = in[index] * (mask[index] > threshold) * scale;\n  }\n}\n\n__kernel void TEMPLATE(dropout_backward,Dtype)(\n    const int n, __global const Dtype* in_diff,\n    __global const unsigned int* mask, const unsigned int threshold,\n    const Dtype scale,\n    __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out_diff[index] = in_diff[index] * scale * (mask[index] > threshold);\n  }\n}";  // NOLINT
std::string eltwise_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(eltwise_max_forward,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data_a,\n    __global const Dtype* bottom_data_b, const int blob_idx,\n    __global Dtype* top_data,\n    __global int* mask) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    Dtype maxval = -FLT_MAX;\n    int maxidx = -1;\n    if (bottom_data_a[index] > bottom_data_b[index]) {\n      // only update for very first bottom_data blob (blob_idx == 0)\n      if (blob_idx == 0) {\n        maxval = bottom_data_a[index];\n        top_data[index] = maxval;\n        maxidx = blob_idx;\n        mask[index] = maxidx;\n      }\n    } else {\n      maxval = bottom_data_b[index];\n      top_data[index] = maxval;\n      maxidx = blob_idx + 1;\n      mask[index] = maxidx;\n    }\n  }\n}\n\n__kernel void TEMPLATE(eltwise_max_backward,Dtype)(const int nthreads,\n                                                   __global const Dtype* top_diff,\n                                                   const int blob_idx,\n                                                   __global const int* mask,\n                                                   __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    Dtype gradient = 0;\n    if (mask[index] == blob_idx) {\n      gradient += top_diff[index];\n    }\n    bottom_diff[index] = gradient;\n  }\n}";  // NOLINT
std::string fillbuffer_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(fillbuffer,Dtype)(const int n, const char alpha, __global char* x,\n                                   const int offx) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    x[index + offx] = alpha;\n  }\n}\n\n__kernel void TEMPLATE(fill,Dtype)(const int n, const Dtype alpha, __global Dtype* x,\n                                   const int offx) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    x[index + offx] = alpha;\n  }\n}";  // NOLINT
std::string im2col_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(im2col,Dtype)(const int n, __global const Dtype* data_im, const int data_im_off,\n    const int height, const int width, const int kernel_h, const int kernel_w,\n    const int pad_h, const int pad_w,\n    const int stride_h, const int stride_w,\n    const int height_col, const int width_col,\n    __global Dtype* data_col, const int data_col_off) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int w_out = index % width_col;\n    int h_index = index / width_col;\n    int h_out = h_index % height_col;\n    int channel_in = h_index / height_col;\n    int channel_out = channel_in * kernel_h * kernel_w;\n    int h_in = h_out * stride_h - pad_h;\n    int w_in = w_out * stride_w - pad_w;\n    __global Dtype* data_col_ptr = data_col + data_col_off;\n    data_col_ptr += (channel_out * height_col + h_out) * width_col + w_out;\n    __global const Dtype* data_im_ptr = data_im + data_im_off;\n    data_im_ptr += (channel_in * height + h_in) * width + w_in;\n    for (int i = 0; i < kernel_h; ++i) {\n      for (int j = 0; j < kernel_w; ++j) {\n        int h = h_in + i;\n        int w = w_in + j;\n        *data_col_ptr = (h >= 0 && w >= 0 && h < height && w < width) ?\n            data_im_ptr[i * width + j] : 0;\n        data_col_ptr += height_col * width_col;\n      }\n    }\n  }\n}\n\n__kernel void TEMPLATE(col2im,Dtype)(const int n, __global const Dtype* data_col, const int data_col_off,\n    const int height, const int width, const int channels,\n    const int patch_h, const int patch_w,\n    const int pad_h, const int pad_w,\n    const int stride_h, const int stride_w,\n    const int height_col, const int width_col,\n    __global Dtype* data_im, const int data_im_off) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype val = 0;\n    int w = index % width + pad_w;\n    int h = (index / width) % height + pad_h;\n    int c = index / (width * height);\n    // compute the start and end of the output\n    int w_col_start = (w < patch_w) ? 0 : (w - patch_w) / stride_w + 1;\n    int w_col_end = min(w / stride_w + 1, width_col);\n    int h_col_start = (h < patch_h) ? 0 : (h - patch_h) / stride_h + 1;\n    int h_col_end = min(h / stride_h + 1, height_col);\n    int offset = data_col_off +\n        (c * patch_h * patch_w + h * patch_w + w) * height_col * width_col;\n    int coeff_h_col = (1 - stride_h * patch_w * height_col) * width_col;\n    int coeff_w_col = (1 - stride_w * height_col * width_col);\n    for (int h_col = h_col_start; h_col < h_col_end; ++h_col) {\n      for (int w_col = w_col_start; w_col < w_col_end; ++w_col) {\n        val += data_col[offset + h_col * coeff_h_col + w_col * coeff_w_col];\n      }\n    }\n    data_im[index + data_im_off] = val;\n  }\n}";  // NOLINT
std::string im2col_sk_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(im2col_sk,Dtype)(const int n,\n                                        __global const Dtype* data_im,\n                                        const int data_offset, const int height,\n                                        const int width, const int kernel_h,\n                                        const int kernel_w,\n                                        const int ext_kernel_h,\n                                        const int ext_kernel_w, const int pad_h,\n                                        const int pad_w, const int stride_h,\n                                        const int stride_w, const int kstride_h,\n                                        const int kstride_w,\n                                        const int height_col,\n                                        const int width_col,\n                                        __global Dtype* data_col) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int w_out = index % width_col;\n    int h_index = index / width_col;\n    int h_out = h_index % height_col;\n    int channel_in = h_index / height_col;\n    int channel_out = channel_in * kernel_h * kernel_w;\n    int h_in = h_out * stride_h - pad_h;\n    int w_in = w_out * stride_w - pad_w;\n    __global Dtype* data_col_ptr = data_col;\n    data_col_ptr += (channel_out * height_col + h_out) * width_col + w_out;\n    __global const Dtype* data_im_ptr = data_im + data_offset;\n    data_im_ptr += (channel_in * height + h_in) * width + w_in;\n    for (int i = 0; i < ext_kernel_h; i += kstride_h) {\n      for (int j = 0; j < ext_kernel_w; j += kstride_w) {\n        int h = h_in + i;\n        int w = w_in + j;\n        (*data_col_ptr) =\n            (h >= 0 && w >= 0 && h < height && w < width) ?\n                data_im_ptr[i * width + j] : 0;\n        data_col_ptr += height_col * width_col;\n      }\n    }\n  }\n\n}\n\n__kernel void TEMPLATE(col2im_sk,Dtype)(const int n,\n                                        __global const Dtype* data_col,\n                                        const int height, const int width,\n                                        const int channels, const int patch_h,\n                                        const int patch_w,\n                                        const int ext_patch_h,\n                                        const int ext_patch_w, const int pad_h,\n                                        const int pad_w, const int stride_h,\n                                        const int stride_w, const int kstride_h,\n                                        const int kstride_w,\n                                        const int height_col,\n                                        const int width_col,\n                                        __global Dtype* data_im,\n                                        const int data_offset) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype val = 0;\n    int w = index % width + pad_w;\n    int h = (index / width) % height + pad_h;\n    int c = index / (width * height);\n    // compute the start and end of the output\n    int width_col_1 = width_col - 1;\n    int height_col_1 = height_col - 1;\n    int w_col_start = (w < ext_patch_w) ? w % kstride_w : (w - ext_patch_w) + 1;\n    int w_col_end =\n        (w >= width_col) ?\n            width_col_1 - (width_col_1 - w_col_start) % kstride_w : w;\n    int h_col_start = (h < ext_patch_h) ? h % kstride_h : (h - ext_patch_h) + 1;\n    int h_col_end =\n        (h >= height_col) ?\n            height_col_1 - (height_col_1 - h_col_start) % kstride_h : h;\n    int w_num = (w - w_col_start) / kstride_w;\n    int h_num = (h - h_col_start) / kstride_h;\n\n    int coeff_w_idx = height_col * width_col;\n    int coeff_h_idx = patch_w * coeff_w_idx;\n    int offset = c * patch_h * coeff_h_idx;\n    for (int h_col = h_col_start, h_idx = h_num; h_col <= h_col_end; h_col +=\n        kstride_h, --h_idx) {\n      for (int w_col = w_col_start, w_idx = w_num; w_col <= w_col_end; w_col +=\n          kstride_w, --w_idx) {\n        //int c_col = c * patch_h * patch_w + (h - h_col) / kstride_h * patch_w + (w - w_col) / kstride_w;\n        //int c_col = c * patch_h * patch_w + h_idx * patch_w + w_idx;\n        //val += data_col[(c_col * height_col + h_col) * width_col + w_col];\n        val += data_col[offset + h_idx * coeff_h_idx + w_idx * coeff_w_idx\n            + h_col * width_col + w_col];\n      }\n    }\n\n    data_im[data_offset + index] = val;\n  }\n}";  // NOLINT
std::string lrn_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(lrn_compute_output,Dtype)(const int nthreads,\n                                                 __global const Dtype* in,\n                                                 __global const Dtype* scale,\n                                                 const Dtype negative_beta,\n                                                 __global Dtype* out) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    out[index] = in[index] * pow(scale[index], negative_beta);\n  }\n}\n\n__kernel void TEMPLATE(lrn_fill_scale,Dtype)(const int nthreads, __global const Dtype* in,\n                             const int num, const int channels,\n                             const int height, const int width, const int size,\n                             const Dtype alpha_over_size, const Dtype k,\n                             __global Dtype* const scale) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int n = index / width / height;\n    const int offset = (n * channels * height + h) * width + w;\n    const int step = height * width;\n    __global const Dtype* in_off = in + offset;\n    __global Dtype* scale_off = scale + offset;\n    int head = 0;\n    const int pre_pad = (size - 1) / 2;\n    const int post_pad = size - pre_pad - 1;\n    Dtype accum_scale = 0;\n    // fill the scale at [n, :, h, w]\n    // accumulate values\n    while (head < post_pad && head < channels) {\n      accum_scale += in_off[head * step] * in_off[head * step];\n      ++head;\n    }\n    // both add and subtract\n    while (head < channels) {\n      accum_scale += in_off[head * step] * in_off[head * step];\n      if (head - size >= 0) {\n        accum_scale -= in_off[(head - size) * step]\n            * in_off[(head - size) * step];\n      }\n      scale_off[(head - post_pad) * step] = k + accum_scale * alpha_over_size;\n      ++head;\n    }\n    // subtract only\n    while (head < channels + post_pad) {\n      if (head - size >= 0) {\n        accum_scale -= in_off[(head - size) * step]\n            * in_off[(head - size) * step];\n      }\n      scale_off[(head - post_pad) * step] = k + accum_scale * alpha_over_size;\n      ++head;\n    }\n  }\n}\n\n__kernel void TEMPLATE(lrn_compute_diff,Dtype)(const int nthreads,\n                               __global const Dtype* bottom_data,\n                               __global const Dtype* top_data,\n                               __global const Dtype* scale,\n                               __global const Dtype* top_diff, const int num,\n                               const int channels, const int height,\n                               const int width, const int size,\n                               const Dtype negative_beta,\n                               const Dtype cache_ratio,\n                               __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int n = index / width / height;\n    const int offset = (n * channels * height + h) * width + w;\n    const int step = height * width;\n    __global const Dtype* bottom_off = bottom_data + offset;\n    __global const Dtype* top_off = top_data + offset;\n    __global const Dtype* scale_off = scale + offset;\n    __global Dtype* top_diff_off = top_diff + offset;\n    __global Dtype* bottom_diff_off = bottom_diff + offset;\n    int head = 0;\n    const int pre_pad = size - (size + 1) / 2;\n    const int post_pad = size - pre_pad - 1;\n    Dtype accum_ratio = 0;\n    // accumulate values\n    while (head < post_pad && head < channels) {\n      accum_ratio += top_diff_off[head * step] * top_off[head * step]\n          / scale_off[head * step];\n      ++head;\n    }\n    // both add and subtract\n    while (head < channels) {\n      accum_ratio += top_diff_off[head * step] * top_off[head * step]\n          / scale_off[head * step];\n      if (head - size >= 0) {\n        accum_ratio -= top_diff_off[(head - size) * step]\n            * top_off[(head - size) * step] / scale_off[(head - size) * step];\n      }\n      bottom_diff_off[(head - post_pad) * step] = top_diff_off[(head - post_pad)\n          * step] * pow(scale_off[(head - post_pad) * step], negative_beta)\n          - cache_ratio * bottom_off[(head - post_pad) * step] * accum_ratio;\n      ++head;\n    }\n    // subtract only\n    while (head < channels + post_pad) {\n      if (head - size >= 0) {\n        accum_ratio -= top_diff_off[(head - size) * step]\n            * top_off[(head - size) * step] / scale_off[(head - size) * step];\n      }\n      bottom_diff_off[(head - post_pad) * step] = top_diff_off[(head - post_pad)\n          * step] * pow(scale_off[(head - post_pad) * step], negative_beta)\n          - cache_ratio * bottom_off[(head - post_pad) * step] * accum_ratio;\n      ++head;\n    }\n  }\n}";  // NOLINT
std::string math_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(mul,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa,\n                                  __global Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = a[index + offa] * b[index + offb];\n  }\n}\n\n__kernel void TEMPLATE(div,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa,\n                                  __global Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = a[index + offa] / b[index + offb];\n  }\n}\n\n__kernel void TEMPLATE(add_scalar,Dtype)(const int N, const Dtype alpha,\n__global Dtype* Y,\n                                         const int offY) {\n  for (int index = get_global_id(0); index < N; index += get_global_size(0)) {\n    Y[offY + index] += alpha;\n  }\n}\n\n__kernel void TEMPLATE(add,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global const Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = a[offa + index] + b[offb + index];\n  }\n}\n\n__kernel void TEMPLATE(sub,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global const Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = a[offa + index] - b[offb + index];\n  }\n}\n\n__kernel void TEMPLATE(abs,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = fabs((Dtype)(a[offa + index]));\n  }\n}\n\n__kernel void TEMPLATE(exp,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = exp(a[offa + index]);\n  }\n}\n\n__kernel void TEMPLATE(log,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = log(a[offa + index]);\n  }\n}\n\n__kernel void TEMPLATE(powx,Dtype)(const int n, __global const Dtype* a,\n                                   const int offa, Dtype alpha,\n                                   __global Dtype* y,\n                                   const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n      if(a[offa + index] < 0 && alpha < 1 && alpha > -1) {\n        y[offy + index] = NAN;\n      } else {\n        y[offy + index] = pow(a[offa + index], alpha);\n      }\n  }\n}\n\n__kernel void TEMPLATE(sign,Dtype)(const int n, __global const Dtype* x,\n                                   const int offx, __global Dtype* y,\n                                   const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = (0.0 < x[index + offx])\n        - (x[index + offx] < 0.0);\n  }\n}\n\n__kernel void TEMPLATE(sgnbit,Dtype)(const int n, __global const Dtype* x,\n                                     const int offx, __global Dtype* y,\n                                     const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = signbit(x[index + offx]);\n  }\n}";  // NOLINT
std::string mergecrop_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(merge_copy_forward, Dtype)(\n    const int nthreads, __global const Dtype* bottom_a,\n    __global const Dtype* bottom_b,\n    __global Dtype* top,\n    int num, int channels_a, int channels_b, int height_a, int width_a,\n    int height_b, int width_b) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n\n    int pad_h = (height_b - height_a) / 2;\n    int pad_w = (width_b - width_a) / 2;\n\n    int batch_id = index / ((channels_a + channels_b) * height_a * width_a);\n\n    int bottom_id = ((index\n        - batch_id * (channels_a + channels_b) * height_a * width_a)\n        / (channels_a * height_a * width_a)) % 2;\n\n    int h = ((index / width_a) % height_a);\n    int w = (index % width_a);\n\n    if (bottom_id == 0) {\n      int channel_id = (index / ((width_a * height_a)) % channels_a);\n      int aidx = ((((batch_id) * channels_a + channel_id) * height_a + h)\n          * width_a + w);\n      top[index] = bottom_a[aidx];\n    } else {\n      int channel_id = (index / ((width_a * height_a)) % channels_b);\n      int bidx =\n          (((batch_id) * channels_b + channel_id) * height_b\n              * width_b) + width_b * (h + pad_h) + pad_w + w;\n      top[index] = bottom_b[bidx];\n    }\n  }\n\n}\n\n__kernel void TEMPLATE(merge_copy_backward,Dtype)(const int nthreads,\n__global Dtype* bottom_a,\n                                                  __global const Dtype* top,\n                                                  int num, int channels_a,\n                                                  int channels_b, int height_a,\n                                                  int width_a, int height_b,\n                                                  int width_b) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int batch_id = index / ((channels_a + channels_b) * height_a * width_a);\n\n    int bottom_id = ((index\n        - batch_id * (channels_a + channels_b) * height_a * width_a)\n        / (channels_a * height_a * width_a)) % 2;\n\n    int h = ((index / width_a) % height_a);\n    int w = (index % width_a);\n\n    if (bottom_id == 0) {\n      int channel_id = (index / ((width_a * height_a)) % channels_a);\n      int aidx = ((((batch_id) * channels_a + channel_id) * height_a + h)\n          * width_a + w);\n      bottom_a[aidx] = top[index];\n    }\n  }\n}";  // NOLINT
std::string pooling_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(max_pool_forward,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w, const int pad_h,\n    const int pad_w,\n    __global Dtype* top_data,\n    const int use_mask, __global int* mask, __global Dtype* top_mask) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int pw = index % pooled_width;\n    const int ph = (index / pooled_width) % pooled_height;\n    const int c = (index / pooled_width / pooled_height) % channels;\n    const int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h - pad_h;\n    int wstart = pw * stride_w - pad_w;\n    const int hend = min(hstart + kernel_h, height);\n    const int wend = min(wstart + kernel_w, width);\n    hstart = max(hstart, 0);\n    wstart = max(wstart, 0);\n    Dtype maxval = -FLT_MAX;\n    int maxidx = -1;\n    __global const Dtype* bottom_slice = bottom_data\n        + (n * channels + c) * height * width;\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        if (bottom_slice[h * width + w] > maxval) {\n          maxidx = h * width + w;\n          maxval = bottom_slice[maxidx];\n        }\n      }\n    }\n    top_data[index] = maxval;\n    if (use_mask == 1) {\n      mask[index] = maxidx;\n    } else {\n      top_mask[index] = maxidx;\n    }\n  }\n}\n\n__kernel void TEMPLATE(ave_pool_forward,Dtype)(\n    const int nthreads, __global const Dtype* const bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w, const int pad_h,\n    const int pad_w, __global Dtype* top_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    {\n      const int pw = index % pooled_width;\n      const int ph = (index / pooled_width) % pooled_height;\n      const int c = (index / pooled_width / pooled_height) % channels;\n      const int n = index / pooled_width / pooled_height / channels;\n      int hstart = ph * stride_h - pad_h;\n      int wstart = pw * stride_w - pad_w;\n      int hend = min(hstart + kernel_h, height + pad_h);\n      int wend = min(wstart + kernel_w, width + pad_w);\n      const int pool_size = (hend - hstart) * (wend - wstart);\n      hstart = max(hstart, 0);\n      wstart = max(wstart, 0);\n      hend = min(hend, height);\n      wend = min(wend, width);\n      Dtype aveval = 0;\n      __global const Dtype* bottom_slice = bottom_data\n          + (n * channels + c) * height * width;\n      for (int h = hstart; h < hend; ++h) {\n        for (int w = wstart; w < wend; ++w) {\n          aveval += bottom_slice[h * width + w];\n        }\n      }\n      top_data[index] = aveval / pool_size;\n    }\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_train,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w,\n    __global Dtype* rand_idx,\n    __global Dtype* top_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int pw = index % pooled_width;\n    const int ph = (index / pooled_width) % pooled_height;\n    const int c = (index / pooled_width / pooled_height) % channels;\n    const int n = index / pooled_width / pooled_height / channels;\n    const int hstart = ph * stride_h;\n    const int hend = min(hstart + kernel_h, height);\n    const int wstart = pw * stride_w;\n    const int wend = min(wstart + kernel_w, width);\n    Dtype cumsum = 0.;\n    __global const Dtype* bottom_slice = bottom_data\n        + (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        cumsum += bottom_slice[h * width + w];\n      }\n    }\n    const float thres = rand_idx[index] * cumsum;\n    // Second pass: get value, and set index.\n    cumsum = 0;\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        cumsum += bottom_slice[h * width + w];\n        if (cumsum >= thres) {\n          rand_idx[index] = ((n * channels + c) * height + h) * width + w;\n          top_data[index] = bottom_slice[h * width + w];\n          h = hend;\n          w = wend;\n        }\n      }\n    }\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_test,Dtype)(\n    const int nthreads, __global const Dtype* const bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w,\n    __global Dtype* top_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int pw = index % pooled_width;\n    const int ph = (index / pooled_width) % pooled_height;\n    const int c = (index / pooled_width / pooled_height) % channels;\n    const int n = index / pooled_width / pooled_height / channels;\n    const int hstart = ph * stride_h;\n    const int hend = min(hstart + kernel_h, height);\n    const int wstart = pw * stride_w;\n    const int wend = min(wstart + kernel_w, width);\n    // We set cumsum to be 0 to avoid divide-by-zero problems\n    Dtype cumsum = FLT_MIN;\n    Dtype cumvalues = 0.;\n    __global const Dtype* bottom_slice = bottom_data\n        + (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        cumsum += bottom_slice[h * width + w];\n        cumvalues += bottom_slice[h * width + w] * bottom_slice[h * width + w];\n      }\n    }\n    top_data[index] = cumvalues / cumsum;\n  }\n}\n\n__kernel void TEMPLATE(max_pool_backward,Dtype)(const int nthreads,\n                                                __global const Dtype* top_diff,\n                                                const int use_mask,\n                                                __global const int* mask,\n                                                __global const Dtype* top_mask,\n                                                const int num,\n                                                const int channels,\n                                                const int height,\n                                                const int width,\n                                                const int pooled_height,\n                                                const int pooled_width,\n                                                const int kernel_h,\n                                                const int kernel_w,\n                                                const int stride_h,\n                                                const int stride_w,\n                                                const int pad_h,\n                                                const int pad_w,\n                                                __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local index\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int c = (index / width / height) % channels;\n    const int n = index / width / height / channels;\n    const int phstart =\n        (h + pad_h < kernel_h) ? 0 : (h + pad_h - kernel_h) / stride_h + 1;\n    const int phend = min((h + pad_h) / stride_h + 1, pooled_height);\n    const int pwstart =\n        (w + pad_w < kernel_w) ? 0 : (w + pad_w - kernel_w) / stride_w + 1;\n    const int pwend = min((w + pad_w) / stride_w + 1, pooled_width);\n    Dtype gradient = 0;\n    const int offset = (n * channels + c) * pooled_height * pooled_width;\n    __global const Dtype* top_diff_slice = top_diff + offset;\n    if (use_mask == 1) {\n      __global const int* mask_slice = mask + offset;\n      for (int ph = phstart; ph < phend; ++ph) {\n        for (int pw = pwstart; pw < pwend; ++pw) {\n          if (mask_slice[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_slice[ph * pooled_width + pw];\n          }\n        }\n      }\n    } else {\n      __global const Dtype* top_mask_slice = top_mask + offset;\n      for (int ph = phstart; ph < phend; ++ph) {\n        for (int pw = pwstart; pw < pwend; ++pw) {\n          if (top_mask_slice[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_slice[ph * pooled_width + pw];\n          }\n        }\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}\n\n__kernel void TEMPLATE(ave_pool_backward,Dtype)(const int nthreads,\n                                                __global const Dtype* top_diff,\n                                                const int num,\n                                                const int channels,\n                                                const int height,\n                                                const int width,\n                                                const int pooled_height,\n                                                const int pooled_width,\n                                                const int kernel_h,\n                                                const int kernel_w,\n                                                const int stride_h,\n                                                const int stride_w,\n                                                const int pad_h,\n                                                const int pad_w,\n                                                __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local index\n    // find out the local offset\n    const int w = index % width + pad_w;\n    const int h = (index / width) % height + pad_h;\n    const int c = (index / width / height) % channels;\n    const int n = index / width / height / channels;\n    const int phstart = (h < kernel_h) ? 0 : (h - kernel_h) / stride_h + 1;\n    const int phend = min(h / stride_h + 1, pooled_height);\n    const int pwstart = (w < kernel_w) ? 0 : (w - kernel_w) / stride_w + 1;\n    const int pwend = min(w / stride_w + 1, pooled_width);\n    Dtype gradient = 0;\n    __global const Dtype* const top_diff_slice = top_diff\n        + (n * channels + c) * pooled_height * pooled_width;\n    for (int ph = phstart; ph < phend; ++ph) {\n      for (int pw = pwstart; pw < pwend; ++pw) {\n        // figure out the pooling size\n        int hstart = ph * stride_h - pad_h;\n        int wstart = pw * stride_w - pad_w;\n        int hend = min(hstart + kernel_h, height + pad_h);\n        int wend = min(wstart + kernel_w, width + pad_w);\n        int pool_size = (hend - hstart) * (wend - wstart);\n        gradient += top_diff_slice[ph * pooled_width + pw] / pool_size;\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_backward,Dtype)(\n    const int nthreads, __global const Dtype* rand_idx,\n    __global const Dtype* const top_diff, const int num, const int channels,\n    const int height, const int width, const int pooled_height,\n    const int pooled_width, const int kernel_h, const int kernel_w,\n    const int stride_h, const int stride_w, __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local index\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int c = (index / width / height) % channels;\n    const int n = index / width / height / channels;\n    const int phstart = (h < kernel_h) ? 0 : (h - kernel_h) / stride_h + 1;\n    const int phend = min(h / stride_h + 1, pooled_height);\n    const int pwstart = (w < kernel_w) ? 0 : (w - kernel_w) / stride_w + 1;\n    const int pwend = min(w / stride_w + 1, pooled_width);\n    Dtype gradient = 0;\n    __global const Dtype* rand_idx_slice = rand_idx\n        + (n * channels + c) * pooled_height * pooled_width;\n    __global const Dtype* top_diff_slice = top_diff\n        + (n * channels + c) * pooled_height * pooled_width;\n    for (int ph = phstart; ph < phend; ++ph) {\n      for (int pw = pwstart; pw < pwend; ++pw) {\n        gradient += top_diff_slice[ph * pooled_width + pw]\n            * (index == (int) (rand_idx_slice[ph * pooled_width + pw]));\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}";  // NOLINT
std::string pooling_sk_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(max_pool_forward_sk,Dtype)(const int nthreads,\n__global Dtype* bottom_data,\n                                                  const int num,\n                                                  const int channels,\n                                                  const int height,\n                                                  const int width,\n                                                  const int pooled_height,\n                                                  const int pooled_width,\n                                                  const int kernel_h,\n                                                  const int kernel_w,\n                                                  const int ext_kernel_h,\n                                                  const int ext_kernel_w,\n                                                  const int stride_h,\n                                                  const int stride_w,\n                                                  const int kstride_h,\n                                                  const int kstride_w,\n                                                  const int pad_h,\n                                                  const int pad_w,\n                                                  __global Dtype* top_data,\n                                                  const int use_mask,\n                                                  __global int* mask,\n                                                  __global Dtype* top_mask) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h - pad_h;\n    int wstart = pw * stride_w - pad_w;\n    int hend = min(hstart + ext_kernel_h, height);\n    int wend = min(wstart + ext_kernel_w, width);\n    hstart = max(hstart, (int) 0);\n    wstart = max(wstart, (int) 0);\n    Dtype maxval = -FLT_MAX;\n    int maxidx = -1;\n    __global Dtype* bottom_data_ptr = bottom_data\n        + (n * channels + c) * height * width;\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        if (bottom_data_ptr[h * width + w] > maxval) {\n          maxidx = h * width + w;\n          maxval = bottom_data_ptr[maxidx];\n        }\n      }\n    }\n    top_data[index] = maxval;\n    if (use_mask == 1) {\n      mask[index] = maxidx;\n    } else {\n      top_mask[index] = maxidx;\n    }\n  }\n}\n\n__kernel void TEMPLATE(max_pool_backward_sk,Dtype)(\n    const int nthreads, __global const Dtype* top_diff, const int use_mask,\n    __global const int* mask, __global const Dtype* top_mask, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w, const int pad_h, const int pad_w,\n    __global Dtype* bottom_diff) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n\n    __global const int* mask_ptr = mask;\n    __global const Dtype* top_diff_ptr = top_diff;\n\n// find out the local index\n// find out the local offset\n    int w = index % width;\n    int h = (index / width) % height;\n    int c = (index / width / height) % channels;\n    int n = index / width / height / channels;\n\n    int pooled_height_1 = pooled_height - 1;\n    int pooled_width_1 = pooled_width - 1;\n    int phstart = (h < ext_kernel_h) ? h % kstride_h : (h - ext_kernel_h) + 1;\n    int phend =\n        (h >= pooled_height) ?\n            pooled_height_1 - (pooled_height_1 - phstart) % kstride_h : h;\n    int pwstart = (w < ext_kernel_w) ? w % kstride_w : (w - ext_kernel_w) + 1;\n    int pwend =\n        (w >= pooled_width) ?\n            pooled_width_1 - (pooled_width_1 - pwstart) % kstride_w : w;\n\n    Dtype gradient = 0;\n    int offset = (n * channels + c) * pooled_height * pooled_width;\n    top_diff_ptr += offset;\n    if (use_mask == 1) {\n      mask_ptr += offset;\n      for (int ph = phstart; ph <= phend; ph += kstride_h) {\n        for (int pw = pwstart; pw <= pwend; pw += kstride_w) {\n          if (mask_ptr[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_ptr[ph * pooled_width + pw];\n          }\n        }\n      }\n    } else {\n      for (int ph = phstart; ph <= phend; ph += kstride_h) {\n        for (int pw = pwstart; pw <= pwend; pw += kstride_w) {\n          if (top_mask[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_ptr[ph * pooled_width + pw];\n          }\n        }\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}\n\n__kernel void TEMPLATE(ave_pool_forward_sk,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w, const int pad_h, const int pad_w,\n    __global Dtype* top_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h - pad_h;\n    int wstart = pw * stride_w - pad_w;\n    int hend = min(hstart + ext_kernel_h, height + pad_h);\n    int wend = min(wstart + ext_kernel_w, width + pad_w);\n    hstart = max(hstart, 0);\n    wstart = max(wstart, 0);\n    hend = min(hend, height);\n    wend = min(wend, width);\n    Dtype aveval = 0;\n    __global const Dtype* bottom_data_ptr = bottom_data;\n    bottom_data_ptr += (n * channels + c) * height * width;\n    int pool_size = 0;\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        aveval += bottom_data_ptr[h * width + w];\n        ++pool_size;\n      }\n    }\n    top_data[index] = aveval / pool_size;\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_train_sk,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w, __global Dtype* rand_idx,\n    __global Dtype* top_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h;\n    int hend = min(hstart + ext_kernel_h, height);\n    int wstart = pw * stride_w;\n    int wend = min(wstart + ext_kernel_w, width);\n    Dtype cumsum = 0.;\n    __global const Dtype* bottom_data_ptr = bottom_data;\n    bottom_data_ptr += (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        cumsum += bottom_data_ptr[h * width + w];\n      }\n    }\n    float thres = rand_idx[index] * cumsum;\n    // Second pass: get value, and set index.\n    cumsum = 0;\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        cumsum += bottom_data_ptr[h * width + w];\n        if (cumsum >= thres) {\n          rand_idx[index] = ((n * channels + c) * height + h) * width + w;\n          top_data[index] = bottom_data_ptr[h * width + w];\n          h = hend;\n          w = wend;\n        }\n      }\n    }\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_test_sk,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w,\n    __global Dtype* top_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h;\n    int hend = min(hstart + ext_kernel_h, height);\n    int wstart = pw * stride_w;\n    int wend = min(wstart + ext_kernel_w, width);\n    // We set cumsum to be 0 to avoid divide-by-zero problems\n    Dtype cumsum = FLT_MIN;\n    Dtype cumvalues = 0.;\n    __global const Dtype* bottom_data_ptr = bottom_data;\n    bottom_data_ptr += (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        cumsum += bottom_data_ptr[h * width + w];\n        cumvalues += bottom_data_ptr[h * width + w]\n            * bottom_data_ptr[h * width + w];\n      }\n    }\n    top_data[index] = cumvalues / cumsum;\n  }\n\n}";  // NOLINT
std::string slice_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(slice,Dtype)(const int nthreads,\n                                    __global const Dtype* in_data,\n                                    const int forward, const int num_slices,\n                                    const int slice_size,\n                                    const int bottom_slice_axis,\n                                    const int top_slice_axis,\n                                    const int offset_slice_axis,\n                                    __global Dtype* out_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int total_slice_size = slice_size * top_slice_axis;\n    const int slice_num = index / total_slice_size;\n    const int slice_index = index % total_slice_size;\n    const int bottom_index = slice_index\n        + (slice_num * bottom_slice_axis + offset_slice_axis) * slice_size;\n    if (forward == 1) {\n      out_data[index] = in_data[bottom_index];\n    } else {\n      out_data[bottom_index] = in_data[index];\n    }\n  }\n}";  // NOLINT
std::string softmax_loss_float = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(softmax_loss_forward,Dtype)(\n    int n, __global const Dtype* prob_data, __global const Dtype* label,\n    __global Dtype* loss,\n    const int num, const int dim, const int spatial_dim,\n    const int has_ignore_label_, const int ignore_label_,\n    __global Dtype* counts) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    const int n = index / spatial_dim;\n    const int s = index % spatial_dim;\n    const int label_value = (int) (label[n * spatial_dim + s]);\n    if (has_ignore_label_ == 1 && label_value == ignore_label_) {\n      loss[index] = 0;\n      counts[index] = 0;\n    } else {\n      loss[index] = -log(\n          max((Dtype) (prob_data[n * dim + label_value * spatial_dim + s]),\n              (Dtype) FLT_MIN));\n      counts[index] = 1;\n    }\n  }\n}\n\n__kernel void TEMPLATE(softmax_loss_backward,Dtype)(const int nthreads,\n                                                    __global const Dtype* top,\n                                                    __global const Dtype* label,\n                                                    __global Dtype* bottom_diff,\n                                                    const int num,\n                                                    const int dim,\n                                                    const int spatial_dim,\n                                                    const int has_ignore_label_,\n                                                    const int ignore_label_,\n                                                    __global Dtype* counts) {\n\n  const int channels = dim / spatial_dim;\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    {\n      const int n = index / spatial_dim;\n      const int s = index % spatial_dim;\n      const int label_value = (int) (label[n * spatial_dim + s]);\n\n      if (has_ignore_label_ == 1 && label_value == ignore_label_) {\n        for (int c = 0; c < channels; ++c) {\n          bottom_diff[n * dim + c * spatial_dim + s] = 0;\n        }\n        counts[index] = 0;\n      } else {\n        bottom_diff[n * dim + label_value * spatial_dim + s] -= 1;\n        counts[index] = 1;\n      }\n    }\n  }\n}";  // NOLINT
std::string activation_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(relu_forward,Dtype)(const int n,\n                                           __global const Dtype* in,\n                                           __global Dtype* out,\n                                           Dtype negative_slope) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = in[index] > 0 ? in[index] : in[index] * negative_slope;\n  }\n}\n\n__kernel void TEMPLATE(relu_backward,Dtype)(const int n,\n                                            __global const Dtype* in_diff,\n                                            __global const Dtype* in_data,\n                                            __global Dtype* out_diff,\n                                            Dtype negative_slope) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out_diff[index] = in_diff[index]\n        * ((in_data[index] > 0) + (in_data[index] <= 0) * negative_slope);\n  }\n}\n\n__kernel void TEMPLATE(tanh_forward,Dtype)(const int n,\n                                           __global const Dtype* in,\n                                           __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = tanh(in[index]);\n  }\n}\n\n__kernel void TEMPLATE(tanh_backward,Dtype)(const int n,\n                                            __global const Dtype* in_diff,\n                                            __global const Dtype* out_data,\n                                            __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype tanhx = out_data[index];\n    out_diff[index] = in_diff[index] * (1 - tanhx * tanhx);\n  }\n}\n\n__kernel void TEMPLATE(sigmoid_forward,Dtype)(const int n,\n                                              __global const Dtype* in,\n                                              __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = 1. / (1. + exp(-in[index]));\n  }\n}\n\n__kernel void TEMPLATE(sigmoid_backward,Dtype)(const int n,\n                                               __global const Dtype* in_diff,\n                                               __global const Dtype* out_data,\n                                               __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    const Dtype sigmoid_x = out_data[index];\n    out_diff[index] = in_diff[index] * sigmoid_x * (1 - sigmoid_x);\n  }\n}\n\n__kernel void TEMPLATE(threshold,Dtype)(const int n, const Dtype threshold,\n                                        __global const Dtype* in,\n                                        __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = in[index] > threshold ? 1 : 0;\n  }\n}\n\n__kernel void TEMPLATE(prelu_forward,Dtype)(const int n, const int channels,\n                                            const int dim,\n                                            __global const Dtype* in,\n                                            __global Dtype* out,\n                                            __global const Dtype* slope_data,\n                                            const int div_factor) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int c = (index / dim) % channels / div_factor;\n    out[index] = in[index] > 0 ? in[index] : in[index] * slope_data[c];\n  }\n}\n\n__kernel void TEMPLATE(prelu_backward,Dtype)(const int n, const int channels,\n                                             const int dim,\n                                             __global const Dtype* in_diff,\n                                             __global const Dtype* in_data,\n                                             __global Dtype* out_diff,\n                                             __global const Dtype* slope_data,\n                                             const int div_factor) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int c = (index / dim) % channels / div_factor;\n    out_diff[index] = in_diff[index]\n        * ((in_data[index] > 0) + (in_data[index] <= 0) * slope_data[c]);\n  }\n}\n\n__kernel void TEMPLATE(prelu_param_backward,Dtype)(const int n,\n                                                   __global const Dtype* in_diff, const int in_diff_off,\n                                                   __global const Dtype* in_data, const int in_data_off,\n                                                   __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out_diff[index] = in_diff[index + in_diff_off] * in_data[index + in_data_off] * (in_data[index + in_data_off] <= 0);\n  }\n}";  // NOLINT
std::string auxiliary_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(gpu_set,Dtype)(const int n, const Dtype alpha, __global Dtype* y) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index] = alpha;\n  }\n}";  // NOLINT
std::string bnll_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(bnll_forward,Dtype)(const int n,\n                                           __global const Dtype* in,\n                                           __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] =\n        in[index] > 0 ?\n            in[index] + log(1. + exp(-in[index])) : log(1. + exp(in[index]));\n  }\n}\n\n__kernel void TEMPLATE(bnll_backward,Dtype)(const int n,\n                                            __global const Dtype* in_diff,\n                                            __global const Dtype* in_data,\n                                            __global Dtype* out_diff) {\n  Dtype kBNLL_THRESHOLD = 50.;\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype expval = exp(min(in_data[index], kBNLL_THRESHOLD));\n    out_diff[index] = in_diff[index] * expval / (expval + 1.);\n  }\n}";  // NOLINT
std::string channel_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(kernel_channel_max,Dtype)(const int num, const int channels,\n                                   const int spatial_dim,\n                                   __global const Dtype* data,\n                                   __global Dtype* out) {\n  for (int index = get_global_id(0); index < num * spatial_dim; index +=\n      get_global_size(0)) {\n    int n = index / spatial_dim;\n    int s = index % spatial_dim;\n    float maxval = -FLT_MAX;\n    for (int c = 0; c < channels; ++c) {\n      maxval = max((Dtype)(data[(n * channels + c) * spatial_dim + s]), (Dtype)maxval);\n    }\n    out[index] = maxval;\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_subtract,Dtype)(const int count, const int num,\n                                        const int channels,\n                                        const int spatial_dim,\n                                        __global const Dtype* channel_max,\n                                        __global Dtype* data) {\n  for (int index = get_global_id(0); index < count;\n      index += get_global_size(0)) {\n    int n = index / channels / spatial_dim;\n    int s = index % spatial_dim;\n    data[index] -= channel_max[n * spatial_dim + s];\n  }\n}\n\n__kernel void TEMPLATE(kernel_exp,Dtype)(const int count, __global const Dtype* data,\n                           __global Dtype* out) {\n  for (int index = get_global_id(0); index < count;\n      index += get_global_size(0)) {\n    out[index] = exp(data[index]);\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_sum,Dtype)(const int num, const int channels,\n                                   const int spatial_dim,\n                                   __global const Dtype* data,\n                                   __global Dtype* channel_sum) {\n  for (int index = get_global_id(0); index < num * spatial_dim; index +=\n      get_global_size(0)) {\n    int n = index / spatial_dim;\n    int s = index % spatial_dim;\n    Dtype sum = 0;\n    for (int c = 0; c < channels; ++c) {\n      sum += data[(n * channels + c) * spatial_dim + s];\n    }\n    channel_sum[index] = sum;\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_div,Dtype)(const int count, const int num,\n                                   const int channels, const int spatial_dim,\n                                   __global const Dtype* channel_sum,\n                                   __global Dtype* data) {\n  for (int index = get_global_id(0); index < count;\n      index += get_global_size(0)) {\n    int n = index / channels / spatial_dim;\n    int s = index % spatial_dim;\n    data[index] /= channel_sum[n * spatial_dim + s];\n  }\n}\n\n__kernel void TEMPLATE(kernel_channel_dot,Dtype)(const int num, const int channels,\n                                   const int spatial_dim,\n                                   __global const Dtype* data_1,\n                                   __global const Dtype* data_2,\n                                   __global Dtype* channel_dot) {\n  for (int index = get_global_id(0); index < num * spatial_dim; index +=\n      get_global_size(0)) {\n    int n = index / spatial_dim;\n    int s = index % spatial_dim;\n    Dtype dot = 0;\n    for (int c = 0; c < channels; ++c) {\n      dot += (data_1[(n * channels + c) * spatial_dim + s]\n          * data_2[(n * channels + c) * spatial_dim + s]);\n    }\n    channel_dot[index] = dot;\n  }\n}";  // NOLINT
std::string concat_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(concat,Dtype)(const int nthreads, __global const Dtype* in_data,\n                                     const int forward, const int num_concats,\n                                     const int concat_size,\n                                     const int top_concat_axis,\n                                     const int bottom_concat_axis,\n                                     const int offset_concat_axis,\n                                     __global Dtype* out_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int total_concat_size = concat_size * bottom_concat_axis;\n    const int concat_num = index / total_concat_size;\n    const int concat_index = index % total_concat_size;\n    const int top_index = concat_index\n        + (concat_num * top_concat_axis + offset_concat_axis) * concat_size;\n    if (forward == 1) {\n      out_data[top_index] = in_data[index];\n    } else {\n      out_data[index] = in_data[top_index];\n    }\n  }\n}";  // NOLINT
std::string contrastive_loss_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(cll_backward,Dtype)(const int count, const int channels,\n                            const Dtype margin, const int legacy_version,\n                            const Dtype alpha, __global const Dtype* y,\n                            __global const Dtype* diff, __global const Dtype* dist_sq,\n                            __global Dtype *bottom_diff) {\n  for (int i = get_global_id(0); i < count;\n      i += get_global_size(0)) {\n    int n = i / channels;  // the num index, to access y and dist_sq\n    if ((int)(y[n])) {  // similar pairs\n      bottom_diff[i] = alpha * diff[i];\n    } else {  // dissimilar pairs\n      Dtype mdist = 0.0;\n      Dtype beta = 0.0;\n      if (legacy_version == 1) {\n        mdist = (margin - dist_sq[n]);\n        beta = -alpha;\n      } else {\n        Dtype dist = sqrt(dist_sq[n]);\n        mdist = (margin - dist);\n        beta = -alpha * mdist / (dist + 1e-4) * diff[i];\n      }\n      if (mdist > 0.0) {\n        bottom_diff[i] = beta;\n      } else {\n        bottom_diff[i] = 0;\n      }\n    }\n  }\n}";  // NOLINT
std::string dropout_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(dropout_forward,Dtype)(const int n,\n                                              __global const Dtype* in,\n                                              __global const unsigned int* mask,\n                                              const unsigned int threshold,\n                                              const Dtype scale,\n                                              __global Dtype* out) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out[index] = in[index] * (mask[index] > threshold) * scale;\n  }\n}\n\n__kernel void TEMPLATE(dropout_backward,Dtype)(\n    const int n, __global const Dtype* in_diff,\n    __global const unsigned int* mask, const unsigned int threshold,\n    const Dtype scale,\n    __global Dtype* out_diff) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    out_diff[index] = in_diff[index] * scale * (mask[index] > threshold);\n  }\n}";  // NOLINT
std::string eltwise_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(eltwise_max_forward,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data_a,\n    __global const Dtype* bottom_data_b, const int blob_idx,\n    __global Dtype* top_data,\n    __global int* mask) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    Dtype maxval = -FLT_MAX;\n    int maxidx = -1;\n    if (bottom_data_a[index] > bottom_data_b[index]) {\n      // only update for very first bottom_data blob (blob_idx == 0)\n      if (blob_idx == 0) {\n        maxval = bottom_data_a[index];\n        top_data[index] = maxval;\n        maxidx = blob_idx;\n        mask[index] = maxidx;\n      }\n    } else {\n      maxval = bottom_data_b[index];\n      top_data[index] = maxval;\n      maxidx = blob_idx + 1;\n      mask[index] = maxidx;\n    }\n  }\n}\n\n__kernel void TEMPLATE(eltwise_max_backward,Dtype)(const int nthreads,\n                                                   __global const Dtype* top_diff,\n                                                   const int blob_idx,\n                                                   __global const int* mask,\n                                                   __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    Dtype gradient = 0;\n    if (mask[index] == blob_idx) {\n      gradient += top_diff[index];\n    }\n    bottom_diff[index] = gradient;\n  }\n}";  // NOLINT
std::string fillbuffer_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(fillbuffer,Dtype)(const int n, const char alpha, __global char* x,\n                                   const int offx) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    x[index + offx] = alpha;\n  }\n}\n\n__kernel void TEMPLATE(fill,Dtype)(const int n, const Dtype alpha, __global Dtype* x,\n                                   const int offx) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    x[index + offx] = alpha;\n  }\n}";  // NOLINT
std::string im2col_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(im2col,Dtype)(const int n, __global const Dtype* data_im, const int data_im_off,\n    const int height, const int width, const int kernel_h, const int kernel_w,\n    const int pad_h, const int pad_w,\n    const int stride_h, const int stride_w,\n    const int height_col, const int width_col,\n    __global Dtype* data_col, const int data_col_off) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int w_out = index % width_col;\n    int h_index = index / width_col;\n    int h_out = h_index % height_col;\n    int channel_in = h_index / height_col;\n    int channel_out = channel_in * kernel_h * kernel_w;\n    int h_in = h_out * stride_h - pad_h;\n    int w_in = w_out * stride_w - pad_w;\n    __global Dtype* data_col_ptr = data_col + data_col_off;\n    data_col_ptr += (channel_out * height_col + h_out) * width_col + w_out;\n    __global const Dtype* data_im_ptr = data_im + data_im_off;\n    data_im_ptr += (channel_in * height + h_in) * width + w_in;\n    for (int i = 0; i < kernel_h; ++i) {\n      for (int j = 0; j < kernel_w; ++j) {\n        int h = h_in + i;\n        int w = w_in + j;\n        *data_col_ptr = (h >= 0 && w >= 0 && h < height && w < width) ?\n            data_im_ptr[i * width + j] : 0;\n        data_col_ptr += height_col * width_col;\n      }\n    }\n  }\n}\n\n__kernel void TEMPLATE(col2im,Dtype)(const int n, __global const Dtype* data_col, const int data_col_off,\n    const int height, const int width, const int channels,\n    const int patch_h, const int patch_w,\n    const int pad_h, const int pad_w,\n    const int stride_h, const int stride_w,\n    const int height_col, const int width_col,\n    __global Dtype* data_im, const int data_im_off) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype val = 0;\n    int w = index % width + pad_w;\n    int h = (index / width) % height + pad_h;\n    int c = index / (width * height);\n    // compute the start and end of the output\n    int w_col_start = (w < patch_w) ? 0 : (w - patch_w) / stride_w + 1;\n    int w_col_end = min(w / stride_w + 1, width_col);\n    int h_col_start = (h < patch_h) ? 0 : (h - patch_h) / stride_h + 1;\n    int h_col_end = min(h / stride_h + 1, height_col);\n    int offset = data_col_off +\n        (c * patch_h * patch_w + h * patch_w + w) * height_col * width_col;\n    int coeff_h_col = (1 - stride_h * patch_w * height_col) * width_col;\n    int coeff_w_col = (1 - stride_w * height_col * width_col);\n    for (int h_col = h_col_start; h_col < h_col_end; ++h_col) {\n      for (int w_col = w_col_start; w_col < w_col_end; ++w_col) {\n        val += data_col[offset + h_col * coeff_h_col + w_col * coeff_w_col];\n      }\n    }\n    data_im[index + data_im_off] = val;\n  }\n}";  // NOLINT
std::string im2col_sk_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(im2col_sk,Dtype)(const int n,\n                                        __global const Dtype* data_im,\n                                        const int data_offset, const int height,\n                                        const int width, const int kernel_h,\n                                        const int kernel_w,\n                                        const int ext_kernel_h,\n                                        const int ext_kernel_w, const int pad_h,\n                                        const int pad_w, const int stride_h,\n                                        const int stride_w, const int kstride_h,\n                                        const int kstride_w,\n                                        const int height_col,\n                                        const int width_col,\n                                        __global Dtype* data_col) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    int w_out = index % width_col;\n    int h_index = index / width_col;\n    int h_out = h_index % height_col;\n    int channel_in = h_index / height_col;\n    int channel_out = channel_in * kernel_h * kernel_w;\n    int h_in = h_out * stride_h - pad_h;\n    int w_in = w_out * stride_w - pad_w;\n    __global Dtype* data_col_ptr = data_col;\n    data_col_ptr += (channel_out * height_col + h_out) * width_col + w_out;\n    __global const Dtype* data_im_ptr = data_im + data_offset;\n    data_im_ptr += (channel_in * height + h_in) * width + w_in;\n    for (int i = 0; i < ext_kernel_h; i += kstride_h) {\n      for (int j = 0; j < ext_kernel_w; j += kstride_w) {\n        int h = h_in + i;\n        int w = w_in + j;\n        (*data_col_ptr) =\n            (h >= 0 && w >= 0 && h < height && w < width) ?\n                data_im_ptr[i * width + j] : 0;\n        data_col_ptr += height_col * width_col;\n      }\n    }\n  }\n\n}\n\n__kernel void TEMPLATE(col2im_sk,Dtype)(const int n,\n                                        __global const Dtype* data_col,\n                                        const int height, const int width,\n                                        const int channels, const int patch_h,\n                                        const int patch_w,\n                                        const int ext_patch_h,\n                                        const int ext_patch_w, const int pad_h,\n                                        const int pad_w, const int stride_h,\n                                        const int stride_w, const int kstride_h,\n                                        const int kstride_w,\n                                        const int height_col,\n                                        const int width_col,\n                                        __global Dtype* data_im,\n                                        const int data_offset) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    Dtype val = 0;\n    int w = index % width + pad_w;\n    int h = (index / width) % height + pad_h;\n    int c = index / (width * height);\n    // compute the start and end of the output\n    int width_col_1 = width_col - 1;\n    int height_col_1 = height_col - 1;\n    int w_col_start = (w < ext_patch_w) ? w % kstride_w : (w - ext_patch_w) + 1;\n    int w_col_end =\n        (w >= width_col) ?\n            width_col_1 - (width_col_1 - w_col_start) % kstride_w : w;\n    int h_col_start = (h < ext_patch_h) ? h % kstride_h : (h - ext_patch_h) + 1;\n    int h_col_end =\n        (h >= height_col) ?\n            height_col_1 - (height_col_1 - h_col_start) % kstride_h : h;\n    int w_num = (w - w_col_start) / kstride_w;\n    int h_num = (h - h_col_start) / kstride_h;\n\n    int coeff_w_idx = height_col * width_col;\n    int coeff_h_idx = patch_w * coeff_w_idx;\n    int offset = c * patch_h * coeff_h_idx;\n    for (int h_col = h_col_start, h_idx = h_num; h_col <= h_col_end; h_col +=\n        kstride_h, --h_idx) {\n      for (int w_col = w_col_start, w_idx = w_num; w_col <= w_col_end; w_col +=\n          kstride_w, --w_idx) {\n        //int c_col = c * patch_h * patch_w + (h - h_col) / kstride_h * patch_w + (w - w_col) / kstride_w;\n        //int c_col = c * patch_h * patch_w + h_idx * patch_w + w_idx;\n        //val += data_col[(c_col * height_col + h_col) * width_col + w_col];\n        val += data_col[offset + h_idx * coeff_h_idx + w_idx * coeff_w_idx\n            + h_col * width_col + w_col];\n      }\n    }\n\n    data_im[data_offset + index] = val;\n  }\n}";  // NOLINT
std::string lrn_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(lrn_compute_output,Dtype)(const int nthreads,\n                                                 __global const Dtype* in,\n                                                 __global const Dtype* scale,\n                                                 const Dtype negative_beta,\n                                                 __global Dtype* out) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    out[index] = in[index] * pow(scale[index], negative_beta);\n  }\n}\n\n__kernel void TEMPLATE(lrn_fill_scale,Dtype)(const int nthreads, __global const Dtype* in,\n                             const int num, const int channels,\n                             const int height, const int width, const int size,\n                             const Dtype alpha_over_size, const Dtype k,\n                             __global Dtype* const scale) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int n = index / width / height;\n    const int offset = (n * channels * height + h) * width + w;\n    const int step = height * width;\n    __global const Dtype* in_off = in + offset;\n    __global Dtype* scale_off = scale + offset;\n    int head = 0;\n    const int pre_pad = (size - 1) / 2;\n    const int post_pad = size - pre_pad - 1;\n    Dtype accum_scale = 0;\n    // fill the scale at [n, :, h, w]\n    // accumulate values\n    while (head < post_pad && head < channels) {\n      accum_scale += in_off[head * step] * in_off[head * step];\n      ++head;\n    }\n    // both add and subtract\n    while (head < channels) {\n      accum_scale += in_off[head * step] * in_off[head * step];\n      if (head - size >= 0) {\n        accum_scale -= in_off[(head - size) * step]\n            * in_off[(head - size) * step];\n      }\n      scale_off[(head - post_pad) * step] = k + accum_scale * alpha_over_size;\n      ++head;\n    }\n    // subtract only\n    while (head < channels + post_pad) {\n      if (head - size >= 0) {\n        accum_scale -= in_off[(head - size) * step]\n            * in_off[(head - size) * step];\n      }\n      scale_off[(head - post_pad) * step] = k + accum_scale * alpha_over_size;\n      ++head;\n    }\n  }\n}\n\n__kernel void TEMPLATE(lrn_compute_diff,Dtype)(const int nthreads,\n                               __global const Dtype* bottom_data,\n                               __global const Dtype* top_data,\n                               __global const Dtype* scale,\n                               __global const Dtype* top_diff, const int num,\n                               const int channels, const int height,\n                               const int width, const int size,\n                               const Dtype negative_beta,\n                               const Dtype cache_ratio,\n                               __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int n = index / width / height;\n    const int offset = (n * channels * height + h) * width + w;\n    const int step = height * width;\n    __global const Dtype* bottom_off = bottom_data + offset;\n    __global const Dtype* top_off = top_data + offset;\n    __global const Dtype* scale_off = scale + offset;\n    __global Dtype* top_diff_off = top_diff + offset;\n    __global Dtype* bottom_diff_off = bottom_diff + offset;\n    int head = 0;\n    const int pre_pad = size - (size + 1) / 2;\n    const int post_pad = size - pre_pad - 1;\n    Dtype accum_ratio = 0;\n    // accumulate values\n    while (head < post_pad && head < channels) {\n      accum_ratio += top_diff_off[head * step] * top_off[head * step]\n          / scale_off[head * step];\n      ++head;\n    }\n    // both add and subtract\n    while (head < channels) {\n      accum_ratio += top_diff_off[head * step] * top_off[head * step]\n          / scale_off[head * step];\n      if (head - size >= 0) {\n        accum_ratio -= top_diff_off[(head - size) * step]\n            * top_off[(head - size) * step] / scale_off[(head - size) * step];\n      }\n      bottom_diff_off[(head - post_pad) * step] = top_diff_off[(head - post_pad)\n          * step] * pow(scale_off[(head - post_pad) * step], negative_beta)\n          - cache_ratio * bottom_off[(head - post_pad) * step] * accum_ratio;\n      ++head;\n    }\n    // subtract only\n    while (head < channels + post_pad) {\n      if (head - size >= 0) {\n        accum_ratio -= top_diff_off[(head - size) * step]\n            * top_off[(head - size) * step] / scale_off[(head - size) * step];\n      }\n      bottom_diff_off[(head - post_pad) * step] = top_diff_off[(head - post_pad)\n          * step] * pow(scale_off[(head - post_pad) * step], negative_beta)\n          - cache_ratio * bottom_off[(head - post_pad) * step] * accum_ratio;\n      ++head;\n    }\n  }\n}";  // NOLINT
std::string math_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(mul,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa,\n                                  __global Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = a[index + offa] * b[index + offb];\n  }\n}\n\n__kernel void TEMPLATE(div,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa,\n                                  __global Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = a[index + offa] / b[index + offb];\n  }\n}\n\n__kernel void TEMPLATE(add_scalar,Dtype)(const int N, const Dtype alpha,\n__global Dtype* Y,\n                                         const int offY) {\n  for (int index = get_global_id(0); index < N; index += get_global_size(0)) {\n    Y[offY + index] += alpha;\n  }\n}\n\n__kernel void TEMPLATE(add,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global const Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = a[offa + index] + b[offb + index];\n  }\n}\n\n__kernel void TEMPLATE(sub,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global const Dtype* b,\n                                  const int offb, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = a[offa + index] - b[offb + index];\n  }\n}\n\n__kernel void TEMPLATE(abs,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = fabs((Dtype)(a[offa + index]));\n  }\n}\n\n__kernel void TEMPLATE(exp,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = exp(a[offa + index]);\n  }\n}\n\n__kernel void TEMPLATE(log,Dtype)(const int n, __global const Dtype* a,\n                                  const int offa, __global Dtype* y,\n                                  const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[offy + index] = log(a[offa + index]);\n  }\n}\n\n__kernel void TEMPLATE(powx,Dtype)(const int n, __global const Dtype* a,\n                                   const int offa, Dtype alpha,\n                                   __global Dtype* y,\n                                   const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n      if(a[offa + index] < 0 && alpha < 1 && alpha > -1) {\n        y[offy + index] = NAN;\n      } else {\n        y[offy + index] = pow(a[offa + index], alpha);\n      }\n  }\n}\n\n__kernel void TEMPLATE(sign,Dtype)(const int n, __global const Dtype* x,\n                                   const int offx, __global Dtype* y,\n                                   const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = (0.0 < x[index + offx])\n        - (x[index + offx] < 0.0);\n  }\n}\n\n__kernel void TEMPLATE(sgnbit,Dtype)(const int n, __global const Dtype* x,\n                                     const int offx, __global Dtype* y,\n                                     const int offy) {\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    y[index + offy] = signbit(x[index + offx]);\n  }\n}";  // NOLINT
std::string mergecrop_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(merge_copy_forward, Dtype)(\n    const int nthreads, __global const Dtype* bottom_a,\n    __global const Dtype* bottom_b,\n    __global Dtype* top,\n    int num, int channels_a, int channels_b, int height_a, int width_a,\n    int height_b, int width_b) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n\n    int pad_h = (height_b - height_a) / 2;\n    int pad_w = (width_b - width_a) / 2;\n\n    int batch_id = index / ((channels_a + channels_b) * height_a * width_a);\n\n    int bottom_id = ((index\n        - batch_id * (channels_a + channels_b) * height_a * width_a)\n        / (channels_a * height_a * width_a)) % 2;\n\n    int h = ((index / width_a) % height_a);\n    int w = (index % width_a);\n\n    if (bottom_id == 0) {\n      int channel_id = (index / ((width_a * height_a)) % channels_a);\n      int aidx = ((((batch_id) * channels_a + channel_id) * height_a + h)\n          * width_a + w);\n      top[index] = bottom_a[aidx];\n    } else {\n      int channel_id = (index / ((width_a * height_a)) % channels_b);\n      int bidx =\n          (((batch_id) * channels_b + channel_id) * height_b\n              * width_b) + width_b * (h + pad_h) + pad_w + w;\n      top[index] = bottom_b[bidx];\n    }\n  }\n\n}\n\n__kernel void TEMPLATE(merge_copy_backward,Dtype)(const int nthreads,\n__global Dtype* bottom_a,\n                                                  __global const Dtype* top,\n                                                  int num, int channels_a,\n                                                  int channels_b, int height_a,\n                                                  int width_a, int height_b,\n                                                  int width_b) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int batch_id = index / ((channels_a + channels_b) * height_a * width_a);\n\n    int bottom_id = ((index\n        - batch_id * (channels_a + channels_b) * height_a * width_a)\n        / (channels_a * height_a * width_a)) % 2;\n\n    int h = ((index / width_a) % height_a);\n    int w = (index % width_a);\n\n    if (bottom_id == 0) {\n      int channel_id = (index / ((width_a * height_a)) % channels_a);\n      int aidx = ((((batch_id) * channels_a + channel_id) * height_a + h)\n          * width_a + w);\n      bottom_a[aidx] = top[index];\n    }\n  }\n}";  // NOLINT
std::string pooling_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(max_pool_forward,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w, const int pad_h,\n    const int pad_w,\n    __global Dtype* top_data,\n    const int use_mask, __global int* mask, __global Dtype* top_mask) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int pw = index % pooled_width;\n    const int ph = (index / pooled_width) % pooled_height;\n    const int c = (index / pooled_width / pooled_height) % channels;\n    const int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h - pad_h;\n    int wstart = pw * stride_w - pad_w;\n    const int hend = min(hstart + kernel_h, height);\n    const int wend = min(wstart + kernel_w, width);\n    hstart = max(hstart, 0);\n    wstart = max(wstart, 0);\n    Dtype maxval = -FLT_MAX;\n    int maxidx = -1;\n    __global const Dtype* bottom_slice = bottom_data\n        + (n * channels + c) * height * width;\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        if (bottom_slice[h * width + w] > maxval) {\n          maxidx = h * width + w;\n          maxval = bottom_slice[maxidx];\n        }\n      }\n    }\n    top_data[index] = maxval;\n    if (use_mask == 1) {\n      mask[index] = maxidx;\n    } else {\n      top_mask[index] = maxidx;\n    }\n  }\n}\n\n__kernel void TEMPLATE(ave_pool_forward,Dtype)(\n    const int nthreads, __global const Dtype* const bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w, const int pad_h,\n    const int pad_w, __global Dtype* top_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    {\n      const int pw = index % pooled_width;\n      const int ph = (index / pooled_width) % pooled_height;\n      const int c = (index / pooled_width / pooled_height) % channels;\n      const int n = index / pooled_width / pooled_height / channels;\n      int hstart = ph * stride_h - pad_h;\n      int wstart = pw * stride_w - pad_w;\n      int hend = min(hstart + kernel_h, height + pad_h);\n      int wend = min(wstart + kernel_w, width + pad_w);\n      const int pool_size = (hend - hstart) * (wend - wstart);\n      hstart = max(hstart, 0);\n      wstart = max(wstart, 0);\n      hend = min(hend, height);\n      wend = min(wend, width);\n      Dtype aveval = 0;\n      __global const Dtype* bottom_slice = bottom_data\n          + (n * channels + c) * height * width;\n      for (int h = hstart; h < hend; ++h) {\n        for (int w = wstart; w < wend; ++w) {\n          aveval += bottom_slice[h * width + w];\n        }\n      }\n      top_data[index] = aveval / pool_size;\n    }\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_train,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w,\n    __global Dtype* rand_idx,\n    __global Dtype* top_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int pw = index % pooled_width;\n    const int ph = (index / pooled_width) % pooled_height;\n    const int c = (index / pooled_width / pooled_height) % channels;\n    const int n = index / pooled_width / pooled_height / channels;\n    const int hstart = ph * stride_h;\n    const int hend = min(hstart + kernel_h, height);\n    const int wstart = pw * stride_w;\n    const int wend = min(wstart + kernel_w, width);\n    Dtype cumsum = 0.;\n    __global const Dtype* bottom_slice = bottom_data\n        + (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        cumsum += bottom_slice[h * width + w];\n      }\n    }\n    const float thres = rand_idx[index] * cumsum;\n    // Second pass: get value, and set index.\n    cumsum = 0;\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        cumsum += bottom_slice[h * width + w];\n        if (cumsum >= thres) {\n          rand_idx[index] = ((n * channels + c) * height + h) * width + w;\n          top_data[index] = bottom_slice[h * width + w];\n          h = hend;\n          w = wend;\n        }\n      }\n    }\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_test,Dtype)(\n    const int nthreads, __global const Dtype* const bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int stride_h, const int stride_w,\n    __global Dtype* top_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int pw = index % pooled_width;\n    const int ph = (index / pooled_width) % pooled_height;\n    const int c = (index / pooled_width / pooled_height) % channels;\n    const int n = index / pooled_width / pooled_height / channels;\n    const int hstart = ph * stride_h;\n    const int hend = min(hstart + kernel_h, height);\n    const int wstart = pw * stride_w;\n    const int wend = min(wstart + kernel_w, width);\n    // We set cumsum to be 0 to avoid divide-by-zero problems\n    Dtype cumsum = FLT_MIN;\n    Dtype cumvalues = 0.;\n    __global const Dtype* bottom_slice = bottom_data\n        + (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        cumsum += bottom_slice[h * width + w];\n        cumvalues += bottom_slice[h * width + w] * bottom_slice[h * width + w];\n      }\n    }\n    top_data[index] = cumvalues / cumsum;\n  }\n}\n\n__kernel void TEMPLATE(max_pool_backward,Dtype)(const int nthreads,\n                                                __global const Dtype* top_diff,\n                                                const int use_mask,\n                                                __global const int* mask,\n                                                __global const Dtype* top_mask,\n                                                const int num,\n                                                const int channels,\n                                                const int height,\n                                                const int width,\n                                                const int pooled_height,\n                                                const int pooled_width,\n                                                const int kernel_h,\n                                                const int kernel_w,\n                                                const int stride_h,\n                                                const int stride_w,\n                                                const int pad_h,\n                                                const int pad_w,\n                                                __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local index\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int c = (index / width / height) % channels;\n    const int n = index / width / height / channels;\n    const int phstart =\n        (h + pad_h < kernel_h) ? 0 : (h + pad_h - kernel_h) / stride_h + 1;\n    const int phend = min((h + pad_h) / stride_h + 1, pooled_height);\n    const int pwstart =\n        (w + pad_w < kernel_w) ? 0 : (w + pad_w - kernel_w) / stride_w + 1;\n    const int pwend = min((w + pad_w) / stride_w + 1, pooled_width);\n    Dtype gradient = 0;\n    const int offset = (n * channels + c) * pooled_height * pooled_width;\n    __global const Dtype* top_diff_slice = top_diff + offset;\n    if (use_mask == 1) {\n      __global const int* mask_slice = mask + offset;\n      for (int ph = phstart; ph < phend; ++ph) {\n        for (int pw = pwstart; pw < pwend; ++pw) {\n          if (mask_slice[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_slice[ph * pooled_width + pw];\n          }\n        }\n      }\n    } else {\n      __global const Dtype* top_mask_slice = top_mask + offset;\n      for (int ph = phstart; ph < phend; ++ph) {\n        for (int pw = pwstart; pw < pwend; ++pw) {\n          if (top_mask_slice[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_slice[ph * pooled_width + pw];\n          }\n        }\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}\n\n__kernel void TEMPLATE(ave_pool_backward,Dtype)(const int nthreads,\n                                                __global const Dtype* top_diff,\n                                                const int num,\n                                                const int channels,\n                                                const int height,\n                                                const int width,\n                                                const int pooled_height,\n                                                const int pooled_width,\n                                                const int kernel_h,\n                                                const int kernel_w,\n                                                const int stride_h,\n                                                const int stride_w,\n                                                const int pad_h,\n                                                const int pad_w,\n                                                __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local index\n    // find out the local offset\n    const int w = index % width + pad_w;\n    const int h = (index / width) % height + pad_h;\n    const int c = (index / width / height) % channels;\n    const int n = index / width / height / channels;\n    const int phstart = (h < kernel_h) ? 0 : (h - kernel_h) / stride_h + 1;\n    const int phend = min(h / stride_h + 1, pooled_height);\n    const int pwstart = (w < kernel_w) ? 0 : (w - kernel_w) / stride_w + 1;\n    const int pwend = min(w / stride_w + 1, pooled_width);\n    Dtype gradient = 0;\n    __global const Dtype* const top_diff_slice = top_diff\n        + (n * channels + c) * pooled_height * pooled_width;\n    for (int ph = phstart; ph < phend; ++ph) {\n      for (int pw = pwstart; pw < pwend; ++pw) {\n        // figure out the pooling size\n        int hstart = ph * stride_h - pad_h;\n        int wstart = pw * stride_w - pad_w;\n        int hend = min(hstart + kernel_h, height + pad_h);\n        int wend = min(wstart + kernel_w, width + pad_w);\n        int pool_size = (hend - hstart) * (wend - wstart);\n        gradient += top_diff_slice[ph * pooled_width + pw] / pool_size;\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_backward,Dtype)(\n    const int nthreads, __global const Dtype* rand_idx,\n    __global const Dtype* const top_diff, const int num, const int channels,\n    const int height, const int width, const int pooled_height,\n    const int pooled_width, const int kernel_h, const int kernel_w,\n    const int stride_h, const int stride_w, __global Dtype* bottom_diff) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    // find out the local index\n    // find out the local offset\n    const int w = index % width;\n    const int h = (index / width) % height;\n    const int c = (index / width / height) % channels;\n    const int n = index / width / height / channels;\n    const int phstart = (h < kernel_h) ? 0 : (h - kernel_h) / stride_h + 1;\n    const int phend = min(h / stride_h + 1, pooled_height);\n    const int pwstart = (w < kernel_w) ? 0 : (w - kernel_w) / stride_w + 1;\n    const int pwend = min(w / stride_w + 1, pooled_width);\n    Dtype gradient = 0;\n    __global const Dtype* rand_idx_slice = rand_idx\n        + (n * channels + c) * pooled_height * pooled_width;\n    __global const Dtype* top_diff_slice = top_diff\n        + (n * channels + c) * pooled_height * pooled_width;\n    for (int ph = phstart; ph < phend; ++ph) {\n      for (int pw = pwstart; pw < pwend; ++pw) {\n        gradient += top_diff_slice[ph * pooled_width + pw]\n            * (index == (int) (rand_idx_slice[ph * pooled_width + pw]));\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}";  // NOLINT
std::string pooling_sk_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(max_pool_forward_sk,Dtype)(const int nthreads,\n__global Dtype* bottom_data,\n                                                  const int num,\n                                                  const int channels,\n                                                  const int height,\n                                                  const int width,\n                                                  const int pooled_height,\n                                                  const int pooled_width,\n                                                  const int kernel_h,\n                                                  const int kernel_w,\n                                                  const int ext_kernel_h,\n                                                  const int ext_kernel_w,\n                                                  const int stride_h,\n                                                  const int stride_w,\n                                                  const int kstride_h,\n                                                  const int kstride_w,\n                                                  const int pad_h,\n                                                  const int pad_w,\n                                                  __global Dtype* top_data,\n                                                  const int use_mask,\n                                                  __global int* mask,\n                                                  __global Dtype* top_mask) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h - pad_h;\n    int wstart = pw * stride_w - pad_w;\n    int hend = min(hstart + ext_kernel_h, height);\n    int wend = min(wstart + ext_kernel_w, width);\n    hstart = max(hstart, (int) 0);\n    wstart = max(wstart, (int) 0);\n    Dtype maxval = -FLT_MAX;\n    int maxidx = -1;\n    __global Dtype* bottom_data_ptr = bottom_data\n        + (n * channels + c) * height * width;\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        if (bottom_data_ptr[h * width + w] > maxval) {\n          maxidx = h * width + w;\n          maxval = bottom_data_ptr[maxidx];\n        }\n      }\n    }\n    top_data[index] = maxval;\n    if (use_mask == 1) {\n      mask[index] = maxidx;\n    } else {\n      top_mask[index] = maxidx;\n    }\n  }\n}\n\n__kernel void TEMPLATE(max_pool_backward_sk,Dtype)(\n    const int nthreads, __global const Dtype* top_diff, const int use_mask,\n    __global const int* mask, __global const Dtype* top_mask, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w, const int pad_h, const int pad_w,\n    __global Dtype* bottom_diff) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n\n    __global const int* mask_ptr = mask;\n    __global const Dtype* top_diff_ptr = top_diff;\n\n// find out the local index\n// find out the local offset\n    int w = index % width;\n    int h = (index / width) % height;\n    int c = (index / width / height) % channels;\n    int n = index / width / height / channels;\n\n    int pooled_height_1 = pooled_height - 1;\n    int pooled_width_1 = pooled_width - 1;\n    int phstart = (h < ext_kernel_h) ? h % kstride_h : (h - ext_kernel_h) + 1;\n    int phend =\n        (h >= pooled_height) ?\n            pooled_height_1 - (pooled_height_1 - phstart) % kstride_h : h;\n    int pwstart = (w < ext_kernel_w) ? w % kstride_w : (w - ext_kernel_w) + 1;\n    int pwend =\n        (w >= pooled_width) ?\n            pooled_width_1 - (pooled_width_1 - pwstart) % kstride_w : w;\n\n    Dtype gradient = 0;\n    int offset = (n * channels + c) * pooled_height * pooled_width;\n    top_diff_ptr += offset;\n    if (use_mask == 1) {\n      mask_ptr += offset;\n      for (int ph = phstart; ph <= phend; ph += kstride_h) {\n        for (int pw = pwstart; pw <= pwend; pw += kstride_w) {\n          if (mask_ptr[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_ptr[ph * pooled_width + pw];\n          }\n        }\n      }\n    } else {\n      for (int ph = phstart; ph <= phend; ph += kstride_h) {\n        for (int pw = pwstart; pw <= pwend; pw += kstride_w) {\n          if (top_mask[ph * pooled_width + pw] == h * width + w) {\n            gradient += top_diff_ptr[ph * pooled_width + pw];\n          }\n        }\n      }\n    }\n    bottom_diff[index] = gradient;\n  }\n}\n\n__kernel void TEMPLATE(ave_pool_forward_sk,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w, const int pad_h, const int pad_w,\n    __global Dtype* top_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h - pad_h;\n    int wstart = pw * stride_w - pad_w;\n    int hend = min(hstart + ext_kernel_h, height + pad_h);\n    int wend = min(wstart + ext_kernel_w, width + pad_w);\n    hstart = max(hstart, 0);\n    wstart = max(wstart, 0);\n    hend = min(hend, height);\n    wend = min(wend, width);\n    Dtype aveval = 0;\n    __global const Dtype* bottom_data_ptr = bottom_data;\n    bottom_data_ptr += (n * channels + c) * height * width;\n    int pool_size = 0;\n    for (int h = hstart; h < hend; ++h) {\n      for (int w = wstart; w < wend; ++w) {\n        aveval += bottom_data_ptr[h * width + w];\n        ++pool_size;\n      }\n    }\n    top_data[index] = aveval / pool_size;\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_train_sk,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w, __global Dtype* rand_idx,\n    __global Dtype* top_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h;\n    int hend = min(hstart + ext_kernel_h, height);\n    int wstart = pw * stride_w;\n    int wend = min(wstart + ext_kernel_w, width);\n    Dtype cumsum = 0.;\n    __global const Dtype* bottom_data_ptr = bottom_data;\n    bottom_data_ptr += (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        cumsum += bottom_data_ptr[h * width + w];\n      }\n    }\n    float thres = rand_idx[index] * cumsum;\n    // Second pass: get value, and set index.\n    cumsum = 0;\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        cumsum += bottom_data_ptr[h * width + w];\n        if (cumsum >= thres) {\n          rand_idx[index] = ((n * channels + c) * height + h) * width + w;\n          top_data[index] = bottom_data_ptr[h * width + w];\n          h = hend;\n          w = wend;\n        }\n      }\n    }\n  }\n}\n\n__kernel void TEMPLATE(sto_pool_forward_test_sk,Dtype)(\n    const int nthreads, __global const Dtype* bottom_data, const int num,\n    const int channels, const int height, const int width,\n    const int pooled_height, const int pooled_width, const int kernel_h,\n    const int kernel_w, const int ext_kernel_h, const int ext_kernel_w,\n    const int stride_h, const int stride_w, const int kstride_h,\n    const int kstride_w,\n    __global Dtype* top_data) {\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    int pw = index % pooled_width;\n    int ph = (index / pooled_width) % pooled_height;\n    int c = (index / pooled_width / pooled_height) % channels;\n    int n = index / pooled_width / pooled_height / channels;\n    int hstart = ph * stride_h;\n    int hend = min(hstart + ext_kernel_h, height);\n    int wstart = pw * stride_w;\n    int wend = min(wstart + ext_kernel_w, width);\n    // We set cumsum to be 0 to avoid divide-by-zero problems\n    Dtype cumsum = FLT_MIN;\n    Dtype cumvalues = 0.;\n    __global const Dtype* bottom_data_ptr = bottom_data;\n    bottom_data_ptr += (n * channels + c) * height * width;\n    // First pass: get sum\n    for (int h = hstart; h < hend; h += kstride_h) {\n      for (int w = wstart; w < wend; w += kstride_w) {\n        cumsum += bottom_data_ptr[h * width + w];\n        cumvalues += bottom_data_ptr[h * width + w]\n            * bottom_data_ptr[h * width + w];\n      }\n    }\n    top_data[index] = cumvalues / cumsum;\n  }\n\n}";  // NOLINT
std::string slice_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(slice,Dtype)(const int nthreads,\n                                    __global const Dtype* in_data,\n                                    const int forward, const int num_slices,\n                                    const int slice_size,\n                                    const int bottom_slice_axis,\n                                    const int top_slice_axis,\n                                    const int offset_slice_axis,\n                                    __global Dtype* out_data) {\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    const int total_slice_size = slice_size * top_slice_axis;\n    const int slice_num = index / total_slice_size;\n    const int slice_index = index % total_slice_size;\n    const int bottom_index = slice_index\n        + (slice_num * bottom_slice_axis + offset_slice_axis) * slice_size;\n    if (forward == 1) {\n      out_data[index] = in_data[bottom_index];\n    } else {\n      out_data[bottom_index] = in_data[index];\n    }\n  }\n}";  // NOLINT
std::string softmax_loss_double = "#ifndef __OPENCL_VERSION__\n#include \"header.cl\"\n#endif\n\n__kernel void TEMPLATE(softmax_loss_forward,Dtype)(\n    int n, __global const Dtype* prob_data, __global const Dtype* label,\n    __global Dtype* loss,\n    const int num, const int dim, const int spatial_dim,\n    const int has_ignore_label_, const int ignore_label_,\n    __global Dtype* counts) {\n\n  for (int index = get_global_id(0); index < n; index += get_global_size(0)) {\n    const int n = index / spatial_dim;\n    const int s = index % spatial_dim;\n    const int label_value = (int) (label[n * spatial_dim + s]);\n    if (has_ignore_label_ == 1 && label_value == ignore_label_) {\n      loss[index] = 0;\n      counts[index] = 0;\n    } else {\n      loss[index] = -log(\n          max((Dtype) (prob_data[n * dim + label_value * spatial_dim + s]),\n              (Dtype) FLT_MIN));\n      counts[index] = 1;\n    }\n  }\n}\n\n__kernel void TEMPLATE(softmax_loss_backward,Dtype)(const int nthreads,\n                                                    __global const Dtype* top,\n                                                    __global const Dtype* label,\n                                                    __global Dtype* bottom_diff,\n                                                    const int num,\n                                                    const int dim,\n                                                    const int spatial_dim,\n                                                    const int has_ignore_label_,\n                                                    const int ignore_label_,\n                                                    __global Dtype* counts) {\n\n  const int channels = dim / spatial_dim;\n\n  for (int index = get_global_id(0); index < nthreads;\n      index += get_global_size(0)) {\n    {\n      const int n = index / spatial_dim;\n      const int s = index % spatial_dim;\n      const int label_value = (int) (label[n * spatial_dim + s]);\n\n      if (has_ignore_label_ == 1 && label_value == ignore_label_) {\n        for (int c = 0; c < channels; ++c) {\n          bottom_diff[n * dim + c * spatial_dim + s] = 0;\n        }\n        counts[index] = 0;\n      } else {\n        bottom_diff[n * dim + label_value * spatial_dim + s] -= 1;\n        counts[index] = 1;\n      }\n    }\n  }\n}";  // NOLINT
viennacl::ocl::program & RegisterKernels(viennacl::ocl::context *ctx) {
  std::stringstream ss;
  ss << header << "\n\n";  // NOLINT
  ss << "#define Dtype float" << "\n\n";  // NOLINT
  ss << activation_float << "\n\n";  // NOLINT
  ss << auxiliary_float << "\n\n";  // NOLINT
  ss << bnll_float << "\n\n";  // NOLINT
  ss << channel_float << "\n\n";  // NOLINT
  ss << concat_float << "\n\n";  // NOLINT
  ss << contrastive_loss_float << "\n\n";  // NOLINT
  ss << dropout_float << "\n\n";  // NOLINT
  ss << eltwise_float << "\n\n";  // NOLINT
  ss << fillbuffer_float << "\n\n";  // NOLINT
  ss << im2col_float << "\n\n";  // NOLINT
  ss << im2col_sk_float << "\n\n";  // NOLINT
  ss << lrn_float << "\n\n";  // NOLINT
  ss << math_float << "\n\n";  // NOLINT
  ss << mergecrop_float << "\n\n";  // NOLINT
  ss << pooling_float << "\n\n";  // NOLINT
  ss << pooling_sk_float << "\n\n";  // NOLINT
  ss << slice_float << "\n\n";  // NOLINT
  ss << softmax_loss_float << "\n\n";  // NOLINT
#ifdef GREENTEA_DOUBLE_SUPPORT
  ss << "#ifdef DOUBLE_SUPPORT_AVAILABLE" << "\n\n";  // NOLINT
  ss << "#undef Dtype" << "\n\n";  // NOLINT
  ss << "#define Dtype double" << "\n\n";  // NOLINT
  ss << activation_double << "\n\n";  // NOLINT
  ss << auxiliary_double << "\n\n";  // NOLINT
  ss << bnll_double << "\n\n";  // NOLINT
  ss << channel_double << "\n\n";  // NOLINT
  ss << concat_double << "\n\n";  // NOLINT
  ss << contrastive_loss_double << "\n\n";  // NOLINT
  ss << dropout_double << "\n\n";  // NOLINT
  ss << eltwise_double << "\n\n";  // NOLINT
  ss << fillbuffer_double << "\n\n";  // NOLINT
  ss << im2col_double << "\n\n";  // NOLINT
  ss << im2col_sk_double << "\n\n";  // NOLINT
  ss << lrn_double << "\n\n";  // NOLINT
  ss << math_double << "\n\n";  // NOLINT
  ss << mergecrop_double << "\n\n";  // NOLINT
  ss << pooling_double << "\n\n";  // NOLINT
  ss << pooling_sk_double << "\n\n";  // NOLINT
  ss << slice_double << "\n\n";  // NOLINT
  ss << softmax_loss_double << "\n\n";  // NOLINT
  ss << "#endif" << "\n\n";
#endif  // GREENTEA_DOUBLE_SUPPORT
  std::string kernel_string = ss.str();
  const char* kernel_program = kernel_string.c_str();
  ctx->build_options("-cl-fast-relaxed-math -cl-mad-enable");
  viennacl::ocl::program &program = ctx->add_program(kernel_program,
      "kernel_program");
  return program;
}
}  // namespace caffe
#endif
